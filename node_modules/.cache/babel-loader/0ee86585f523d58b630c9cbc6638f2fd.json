{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\react-test\\\\src\\\\TaskOne.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nconst datas = ['a', 'b', 'c'];\nconst myArray = [{\n  name: \"cat\",\n  count: 0\n}, {\n  name: \"dog\",\n  count: 0\n}, {\n  name: \"hamster\",\n  count: 0\n}, {\n  name: \"lizard\",\n  count: 0\n}];\n\nfunction shuffle(arra1) {\n  var ctr = arra1.length,\n      temp,\n      index;\n\n  while (ctr > 0) {\n    index = Math.floor(Math.random() * ctr);\n    ctr--;\n    temp = arra1[ctr];\n    arra1[ctr] = arra1[index];\n    arra1[index] = temp;\n  }\n\n  return arra1;\n}\n\nfunction App(props) {\n  _s();\n\n  const [list, setList] = useState(myArray);\n  useEffect(() => {\n    const mountArray = shuffle(myArray);\n    setList(mountArray);\n  }, []);\n\n  function handleShuffle() {\n    const changes = shuffle([...list]);\n    setList(changes);\n    console.log(\"Shuffle\", myArray);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [list.map((x, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [x.name, \" - \", x.count, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setList([...list], x.count = x.count + 1),\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)]\n    }, x.name + x.index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleShuffle,\n      children: \"Shuffle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"g1ZDy3me22btE4LLzkPN56S42DI=\");\n\n_c = App;\nexport default App; // import React, { useEffect, useState } from \"react\";\n// export default function TaskTwo() {\n//     var datas = ['a', 'b', 'c'];\n//     var output = [...datas];\n//     useEffect(() => {\n//         const [list, setList] = useState(output);\n//         setList(shuffle(output))     \n//       }, []);\n//     function ontoggleValue (){\n//         console.log('minar');\n//         // output = output.sort(() => Math.random() - 0.5);\n//         console.log(output);\n//         // return (\n//         //     output = { datas.map((data, key) =>\n//         //         {data}\n//         //         ) };\n//         // );\n//     }\n//     return (\n//         <div>\n//             <a onClick={ useEffect } >{output}</a>\n//             {/* <a key={key}  onClick={ ontoggleValue }>\n//                     <p >{key}{data}</p>\n//                 </a> */}\n//         </div>\n//     )\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/xampp/htdocs/react-test/src/TaskOne.js"],"names":["React","useEffect","useState","datas","myArray","name","count","shuffle","arra1","ctr","length","temp","index","Math","floor","random","App","props","list","setList","mountArray","handleShuffle","changes","console","log","map","x"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAGA,MAAMC,KAAK,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAd;AACA,MAAMC,OAAO,GAAG,CACd;AAAEC,EAAAA,IAAI,EAAE,KAAR;AAAeC,EAAAA,KAAK,EAAE;AAAtB,CADc,EAEd;AAAED,EAAAA,IAAI,EAAE,KAAR;AAAeC,EAAAA,KAAK,EAAE;AAAtB,CAFc,EAGd;AAAED,EAAAA,IAAI,EAAE,SAAR;AAAmBC,EAAAA,KAAK,EAAE;AAA1B,CAHc,EAId;AAAED,EAAAA,IAAI,EAAE,QAAR;AAAkBC,EAAAA,KAAK,EAAE;AAAzB,CAJc,CAAhB;;AAOA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,MAAIC,GAAG,GAAGD,KAAK,CAACE,MAAhB;AAAA,MACEC,IADF;AAAA,MAEEC,KAFF;;AAGA,SAAOH,GAAG,GAAG,CAAb,EAAgB;AACdG,IAAAA,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,GAA3B,CAAR;AACAA,IAAAA,GAAG;AACHE,IAAAA,IAAI,GAAGH,KAAK,CAACC,GAAD,CAAZ;AACAD,IAAAA,KAAK,CAACC,GAAD,CAAL,GAAaD,KAAK,CAACI,KAAD,CAAlB;AACAJ,IAAAA,KAAK,CAACI,KAAD,CAAL,GAAeD,IAAf;AACD;;AACD,SAAOH,KAAP;AACD;;AAED,SAASQ,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAClB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAACE,OAAD,CAAhC;AACAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,UAAU,GAAGb,OAAO,CAACH,OAAD,CAA1B;AACAe,IAAAA,OAAO,CAACC,UAAD,CAAP;AACD,GAHQ,EAGN,EAHM,CAAT;;AAKA,WAASC,aAAT,GAAyB;AACvB,UAAMC,OAAO,GAAGf,OAAO,CAAC,CAAC,GAAGW,IAAJ,CAAD,CAAvB;AACAC,IAAAA,OAAO,CAACG,OAAD,CAAP;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBpB,OAAvB;AACD;;AAED,sBACE;AAAA,eACGc,IAAI,CAACO,GAAL,CAAS,CAACC,CAAD,EAAId,KAAJ,kBACR;AAAA,iBACGc,CAAC,CAACrB,IADL,SACcqB,CAAC,CAACpB,KADhB,eAEE;AAAQ,QAAA,OAAO,EAAE,MAAMa,OAAO,CAAC,CAAC,GAAGD,IAAJ,CAAD,EAAaQ,CAAC,CAACpB,KAAF,GAAUoB,CAAC,CAACpB,KAAF,GAAU,CAAjC,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,OAAUoB,CAAC,CAACrB,IAAF,GAASqB,CAAC,CAACd,KAArB;AAAA;AAAA;AAAA;AAAA,YADD,CADH,eASE;AAAQ,MAAA,OAAO,EAAES,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GA1BQL,G;;KAAAA,G;AA4BT,eAAeA,GAAf,C,CAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\n\r\nconst datas = ['a', 'b', 'c'];\r\nconst myArray = [\r\n  { name: \"cat\", count: 0 },\r\n  { name: \"dog\", count: 0 },\r\n  { name: \"hamster\", count: 0 },\r\n  { name: \"lizard\", count: 0 }\r\n];\r\n\r\nfunction shuffle(arra1) {\r\n  var ctr = arra1.length,\r\n    temp,\r\n    index;\r\n  while (ctr > 0) {\r\n    index = Math.floor(Math.random() * ctr);\r\n    ctr--;\r\n    temp = arra1[ctr];\r\n    arra1[ctr] = arra1[index];\r\n    arra1[index] = temp;\r\n  }\r\n  return arra1;\r\n}\r\n\r\nfunction App(props) {\r\n  const [list, setList] = useState(myArray);\r\n  useEffect(() => {\r\n    const mountArray = shuffle(myArray);\r\n    setList(mountArray);\r\n  }, []);\r\n\r\n  function handleShuffle() {\r\n    const changes = shuffle([...list]);\r\n    setList(changes);\r\n    console.log(\"Shuffle\", myArray);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {list.map((x, index) => (\r\n        <div key={x.name + x.index}>\r\n          {x.name} - {x.count}\r\n          <button onClick={() => setList([...list], (x.count = x.count + 1))}>\r\n            +\r\n          </button>\r\n        </div>\r\n      ))}\r\n      <button onClick={handleShuffle}>Shuffle</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n\r\n// export default function TaskTwo() {\r\n//     var datas = ['a', 'b', 'c'];\r\n//     var output = [...datas];\r\n\r\n//     useEffect(() => {\r\n//         const [list, setList] = useState(output);\r\n//         setList(shuffle(output))     \r\n//       }, []);\r\n\r\n//     function ontoggleValue (){\r\n//         console.log('minar');\r\n//         // output = output.sort(() => Math.random() - 0.5);\r\n//         console.log(output);\r\n\r\n        \r\n//         // return (\r\n//         //     output = { datas.map((data, key) =>\r\n//         //         {data}\r\n//         //         ) };\r\n//         // );\r\n//     }\r\n\r\n//     return (\r\n//         <div>\r\n            \r\n//             <a onClick={ useEffect } >{output}</a>\r\n            \r\n//             {/* <a key={key}  onClick={ ontoggleValue }>\r\n//                     <p >{key}{data}</p>\r\n//                 </a> */}\r\n            \r\n//         </div>\r\n//     )\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}